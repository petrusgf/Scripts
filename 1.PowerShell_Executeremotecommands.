# Data  ## http://www.leeholmes.com/blog/2009/11/20/testing-for-powershell-remoting-test-psremoting/  Helped me to create that.
# I added authentication.
# Copy and execute file using autenthication.

[CmdletBinding()] 
param ( 
    [Parameter(Mandatory = $True, 
               ValueFromPipeline = $True, 
               ValueFromPipelineByPropertyName = $True)] 
    [string]$Computername, 
    [Parameter(Mandatory = $True, 
               ValueFromPipeline = $False, 
               ValueFromPipelineByPropertyName = $False)] 
    [string]$Username, 
    [Parameter(Mandatory = $True, 
               ValueFromPipeline = $False, 
               ValueFromPipelineByPropertyName = $False)] 
    [string]$Password, 
    [Parameter(Mandatory = $True, 
               ValueFromPipeline = $False, 
               ValueFromPipelineByPropertyName = $False)] 
    [string]$FolderPath, 
    [Parameter(Mandatory = $True, 
               ValueFromPipeline = $False, 
               ValueFromPipelineByPropertyName = $False)] 
    [string]$ScriptPath, 
    [Parameter(Mandatory = $False, 
               ValueFromPipeline = $False, 
               ValueFromPipelineByPropertyName = $False)] 
    [string]$RemoteDrive = 'C' 
) 
 
begin { 
    function Test-PsRemoting { 
        param ( 
            [Parameter(Mandatory = $true)] 
            $computername 
        ) 
         
        try { 
            $errorActionPreference = "Stop" 
            $result = Invoke-Command -ComputerName $computername { 1 } 
        } catch { 
            Write-Verbose $_ 
            return $false 
        } 
         
        ## I’ve never seen this happen, but if you want to be 
        ## thorough…. 
        if ($result -ne 1) { 
            Write-Verbose "Remoting to $computerName returned an unexpected result." 
            return $false 
        } 
        $true 
    } 
     
    Write-Verbose "Validating prereqs for remote script execution..." 
    if (!(Test-Path $FolderPath)) { 
        throw 'Folder path does not exist' 
    } elseif (!(Test-Path $ScriptPath)) { 
        throw 'Script path does not exist' 
    } elseif ((Get-ItemProperty -Path $ScriptPath).Extension -ne '.ps1') { 
        throw 'Script specified is not a Powershell script' 
    } elseif (!(Test-Connection -Computername  $Computername -Quiet -Count 1)) { 
        throw 'Computer is not reachable' 
    } elseif (!(Test-PsRemoting $Computername)) { 
        throw 'Remoting is not enabled on remote computer'     
    } 
    $ScriptName = $ScriptPath | Split-Path -Leaf 
    $RemoteFolderPath = $FolderPath | Split-Path -Leaf 
    $RemoteScriptPath = "$RemoteDrive`:\$RemoteFolderPath\$ScriptName" 
} 
 
process { 
    $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $UserName , $Password 
    Write-Verbose "Copying the folder $FolderPath to the remote computer $ComputerName..." 
    Copy-Item $FolderPath -Recurse "\\$Computername\$RemoteDrive`$" -Force 
    Write-Verbose "Copying the script $ScriptName to the remote computer $ComputerName..." 
    Copy-Item $ScriptPath "\\$Computername\$RemoteDrive`$\$RemoteFolderPath" -Force 
    Write-Verbose "Executing $RemoteDrive`:\$RemoteFolderPath\$ScriptName on the remote computer $ComputerName..." 
    Invoke-Command -ComputerName $Computername -Credential:Credential -ScriptBlock { & $using:RemoteScriptPath } 
} 
 
end { 
    Write-Verbose "Cleaning up the copied folder and script from remote computer $Computername..." 
    Remove-Item "\\$ComputerName\$RemoteDrive`$\$RemoteFolderPath" -Recurse -Force 
}
